diff --git a/hybris/common/hooks.c b/hybris/common/hooks.c
index 444ad04..388f2de 100644
--- a/hybris/common/hooks.c
+++ b/hybris/common/hooks.c
@@ -912,7 +912,7 @@ static int _hybris_hook_pthread_cond_destroy(pthread_cond_t *cond)
          * when it is destroyed and bionic code does not always follow this
          * requirement. To prevent deadlocks reset the reference count of the
          * condition variable. */
-        realcond->__data.__wrefs = 0;
+        realcond->__data.__nwaiters = 0;
         ret = pthread_cond_destroy(realcond);
         free(realcond);
     }
diff --git a/hybris/common/jb/dlfcn.c b/hybris/common/jb/dlfcn.c
index 248bed9..90ee349 100644
--- a/hybris/common/jb/dlfcn.c
+++ b/hybris/common/jb/dlfcn.c
@@ -217,44 +217,50 @@ static Elf_Sym libdl_symtab[] = {
     { st_name: sizeof(ANDROID_LIBDL_STRTAB) - 1,
     },
     { st_name: 0,   // starting index of the name in libdl_info.strtab
-      st_value: (Elf_Addr) &android_dlopen,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
     { st_name: 7,
-      st_value: (Elf_Addr) &android_dlclose,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
     { st_name: 15,
-      st_value: (Elf_Addr) &android_dlsym,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
     { st_name: 21,
-      st_value: (Elf_Addr) &android_dlerror,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
     { st_name: 29,
-      st_value: (Elf_Addr) &android_dladdr,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
     { st_name: 36,
-      st_value: (Elf_Addr) &android_dl_iterate_phdr,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
 #ifdef ANDROID_ARM_LINKER
     { st_name: 52,
-      st_value: (Elf_Addr) &android_dl_unwind_find_exidx,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
 #endif
 };
 
+void fixup_symtab()
+{
+    libdl_symtab[1].st_value=(Elf_Addr) &android_dlopen;
+    libdl_symtab[2].st_value=(Elf_Addr) &android_dlclose;
+    libdl_symtab[3].st_value=(Elf_Addr) &android_dlsym;
+    libdl_symtab[4].st_value=(Elf_Addr) &android_dlerror;
+    libdl_symtab[5].st_value=(Elf_Addr) &android_dladdr;
+    libdl_symtab[6].st_value=(Elf_Addr) &android_dl_iterate_phdr;
+#ifdef ANDROID_ARM_LINKER
+    libdl_symtab[7].st_value=(Elf_Addr) &android_dl_unwind_find_exidx;
+#endif
+}
+
 /* Fake out a hash table with a single bucket.
  * A search of the hash table will look through
  * libdl_symtab starting with index [1], then
diff --git a/hybris/common/jb/linker.c b/hybris/common/jb/linker.c
index 1043dde..98e4732 100644
--- a/hybris/common/jb/linker.c
+++ b/hybris/common/jb/linker.c
@@ -2177,6 +2177,8 @@ static unsigned __linker_init_post_relocation(unsigned **elfdata)
      */
     //__libc_init_tls(elfdata);
 
+    fixup_symtab();
+
     pid = getpid();
 
 #if TIMING
diff --git a/hybris/common/jb/linker.h b/hybris/common/jb/linker.h
index a9d5d3e..dc2c9fb 100644
--- a/hybris/common/jb/linker.h
+++ b/hybris/common/jb/linker.h
@@ -171,6 +171,7 @@ struct soinfo
 
 
 extern soinfo libdl_info;
+extern void fixup_symtab();
 
 #ifdef ANDROID_ARM_LINKER
 
diff --git a/hybris/egl/platforms/fbdev/fbdev_window.cpp b/hybris/egl/platforms/fbdev/fbdev_window.cpp
index 6e5408a..a676186 100644
--- a/hybris/egl/platforms/fbdev/fbdev_window.cpp
+++ b/hybris/egl/platforms/fbdev/fbdev_window.cpp
@@ -469,7 +469,7 @@ unsigned int FbDevNativeWindow::getUsage() const
  *  Calling this function will usually cause following buffers to be
  *  reallocated.
  */
-int FbDevNativeWindow::setUsage(uint64_t usage)
+int FbDevNativeWindow::setUsage(int usage)
 {
     m_allocateBuffers = (m_usage != usage);
     TRACE("usage=x%" PRIx64 " m_allocateBuffers=%d", usage, m_allocateBuffers);
diff --git a/hybris/egl/platforms/fbdev/fbdev_window.h b/hybris/egl/platforms/fbdev/fbdev_window.h
index 041e9c7..0a19b64 100644
--- a/hybris/egl/platforms/fbdev/fbdev_window.h
+++ b/hybris/egl/platforms/fbdev/fbdev_window.h
@@ -64,7 +64,7 @@ protected:
     virtual unsigned int transformHint() const;
     virtual unsigned int getUsage() const;
     // perform calls
-    virtual int setUsage(uint64_t usage);
+    virtual int setUsage(int usage);
     virtual int setBuffersFormat(int format);
     virtual int setBuffersDimensions(int width, int height);
     virtual int setBufferCount(int cnt);
diff --git a/hybris/egl/platforms/hwcomposer/hwcomposer_window.cpp b/hybris/egl/platforms/hwcomposer/hwcomposer_window.cpp
index ef71f2e..c54ba9b 100644
--- a/hybris/egl/platforms/hwcomposer/hwcomposer_window.cpp
+++ b/hybris/egl/platforms/hwcomposer/hwcomposer_window.cpp
@@ -432,7 +432,7 @@ unsigned int HWComposerNativeWindow::getUsage() const
  *  Calling this function will usually cause following buffers to be
  *  reallocated.
  */
-int HWComposerNativeWindow::setUsage(uint64_t usage)
+int HWComposerNativeWindow::setUsage(int usage)
 {
     usage |= GRALLOC_USAGE_HW_COMPOSER|GRALLOC_USAGE_HW_FB;
     int need_realloc = (m_usage != (unsigned int) usage);
diff --git a/hybris/egl/platforms/hwcomposer/hwcomposer_window.h b/hybris/egl/platforms/hwcomposer/hwcomposer_window.h
index 6b78fe4..2cb7da5 100644
--- a/hybris/egl/platforms/hwcomposer/hwcomposer_window.h
+++ b/hybris/egl/platforms/hwcomposer/hwcomposer_window.h
@@ -67,7 +67,7 @@ protected:
     virtual unsigned int transformHint() const;
     virtual unsigned int getUsage() const;
     // perform calls
-    virtual int setUsage(uint64_t usage);
+    virtual int setUsage(int usage);
     virtual int setBuffersFormat(int format);
     virtual int setBuffersDimensions(int width, int height);
     virtual int setBufferCount(int cnt);
diff --git a/hybris/egl/platforms/wayland/wayland_window.h b/hybris/egl/platforms/wayland/wayland_window.h
index 2f8277d..b7af5cf 100644
--- a/hybris/egl/platforms/wayland/wayland_window.h
+++ b/hybris/egl/platforms/wayland/wayland_window.h
@@ -179,7 +179,7 @@ protected:
     virtual unsigned int transformHint() const;
     virtual unsigned int getUsage() const;
     // perform calls
-    virtual int setUsage(uint64_t usage);
+    virtual int setUsage(int usage);
     virtual int setBuffersFormat(int format);
     virtual int setBuffersDimensions(int width, int height);
     virtual int setBufferCount(int cnt);
diff --git a/hybris/platforms/common/nativewindowbase.h b/hybris/platforms/common/nativewindowbase.h
index 9161852..3d6358c 100644
--- a/hybris/platforms/common/nativewindowbase.h
+++ b/hybris/platforms/common/nativewindowbase.h
@@ -87,7 +87,7 @@ protected:
 	//perform interfaces
 	virtual int setBuffersFormat(int format) = 0;
 	virtual int setBuffersDimensions(int width, int height) = 0;
-	virtual int setUsage(uint64_t usage) = 0;
+	virtual int setUsage(int usage) = 0;
 	virtual int setBufferCount(int cnt) = 0;
 private:
 	static int _setSwapInterval(struct ANativeWindow* window, int interval);
diff --git a/hybris/platforms/wayland/wayland_window_common.cpp b/hybris/platforms/wayland/wayland_window_common.cpp
index 16d917b..f4e5991 100644
--- a/hybris/platforms/wayland/wayland_window_common.cpp
+++ b/hybris/platforms/wayland/wayland_window_common.cpp
@@ -530,7 +530,7 @@ int WaylandNativeWindow::setBuffersDimensions(int width, int height) {
     return NO_ERROR;
 }
 
-int WaylandNativeWindow::setUsage(uint64_t usage) {
+int WaylandNativeWindow::setUsage(int usage) {
     if ((usage | GRALLOC_USAGE_HW_TEXTURE) != m_usage)
     {
         TRACE("old-usage:x%" PRIx64 " new-usage:x%" PRIx64, m_usage, usage);
diff --git a/hybris/vulkan/platforms/wayland/wayland_window.h b/hybris/vulkan/platforms/wayland/wayland_window.h
index fbd02df..8ac214c 100644
--- a/hybris/vulkan/platforms/wayland/wayland_window.h
+++ b/hybris/vulkan/platforms/wayland/wayland_window.h
@@ -176,7 +176,7 @@ protected:
     virtual unsigned int transformHint() const;
     virtual unsigned int getUsage() const;
     // perform calls
-    virtual int setUsage(uint64_t usage);
+    virtual int setUsage(int usage);
     virtual int setBuffersFormat(int format);
     virtual int setBuffersDimensions(int width, int height);
     virtual int setBufferCount(int cnt);
