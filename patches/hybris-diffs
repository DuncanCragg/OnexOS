diff --git a/.gitignore b/.gitignore
index e81dfaa..23ad41a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,19 @@
+,*
+COPYING
+INSTALL
+*.pc
+test_audio
+test_dlopen
+test_glesv3
+test_hwcomposer
+test_media
+test_opencl
+test_recorder
+test_vibrator
+test_wifi
+test_vulkan
+test_hwcomposer_c
+
 Makefile.in
 Makefile
 *.o
diff --git a/hybris/common/hooks.c b/hybris/common/hooks.c
index 444ad04..388f2de 100644
--- a/hybris/common/hooks.c
+++ b/hybris/common/hooks.c
@@ -912,7 +912,7 @@ static int _hybris_hook_pthread_cond_destroy(pthread_cond_t *cond)
          * when it is destroyed and bionic code does not always follow this
          * requirement. To prevent deadlocks reset the reference count of the
          * condition variable. */
-        realcond->__data.__wrefs = 0;
+        realcond->__data.__nwaiters = 0;
         ret = pthread_cond_destroy(realcond);
         free(realcond);
     }
diff --git a/hybris/common/jb/dlfcn.c b/hybris/common/jb/dlfcn.c
index 248bed9..90ee349 100644
--- a/hybris/common/jb/dlfcn.c
+++ b/hybris/common/jb/dlfcn.c
@@ -217,44 +217,50 @@ static Elf_Sym libdl_symtab[] = {
     { st_name: sizeof(ANDROID_LIBDL_STRTAB) - 1,
     },
     { st_name: 0,   // starting index of the name in libdl_info.strtab
-      st_value: (Elf_Addr) &android_dlopen,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
     { st_name: 7,
-      st_value: (Elf_Addr) &android_dlclose,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
     { st_name: 15,
-      st_value: (Elf_Addr) &android_dlsym,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
     { st_name: 21,
-      st_value: (Elf_Addr) &android_dlerror,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
     { st_name: 29,
-      st_value: (Elf_Addr) &android_dladdr,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
     { st_name: 36,
-      st_value: (Elf_Addr) &android_dl_iterate_phdr,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
 #ifdef ANDROID_ARM_LINKER
     { st_name: 52,
-      st_value: (Elf_Addr) &android_dl_unwind_find_exidx,
       st_info: STB_GLOBAL << 4,
       st_shndx: 1,
     },
 #endif
 };
 
+void fixup_symtab()
+{
+    libdl_symtab[1].st_value=(Elf_Addr) &android_dlopen;
+    libdl_symtab[2].st_value=(Elf_Addr) &android_dlclose;
+    libdl_symtab[3].st_value=(Elf_Addr) &android_dlsym;
+    libdl_symtab[4].st_value=(Elf_Addr) &android_dlerror;
+    libdl_symtab[5].st_value=(Elf_Addr) &android_dladdr;
+    libdl_symtab[6].st_value=(Elf_Addr) &android_dl_iterate_phdr;
+#ifdef ANDROID_ARM_LINKER
+    libdl_symtab[7].st_value=(Elf_Addr) &android_dl_unwind_find_exidx;
+#endif
+}
+
 /* Fake out a hash table with a single bucket.
  * A search of the hash table will look through
  * libdl_symtab starting with index [1], then
diff --git a/hybris/common/jb/linker.c b/hybris/common/jb/linker.c
index 1043dde..98e4732 100644
--- a/hybris/common/jb/linker.c
+++ b/hybris/common/jb/linker.c
@@ -2177,6 +2177,8 @@ static unsigned __linker_init_post_relocation(unsigned **elfdata)
      */
     //__libc_init_tls(elfdata);
 
+    fixup_symtab();
+
     pid = getpid();
 
 #if TIMING
diff --git a/hybris/common/jb/linker.h b/hybris/common/jb/linker.h
index a9d5d3e..dc2c9fb 100644
--- a/hybris/common/jb/linker.h
+++ b/hybris/common/jb/linker.h
@@ -171,6 +171,7 @@ struct soinfo
 
 
 extern soinfo libdl_info;
+extern void fixup_symtab();
 
 #ifdef ANDROID_ARM_LINKER
 
diff --git a/hybris/egl/platforms/fbdev/fbdev_window.cpp b/hybris/egl/platforms/fbdev/fbdev_window.cpp
index 6e5408a..a676186 100644
--- a/hybris/egl/platforms/fbdev/fbdev_window.cpp
+++ b/hybris/egl/platforms/fbdev/fbdev_window.cpp
@@ -469,7 +469,7 @@ unsigned int FbDevNativeWindow::getUsage() const
  *  Calling this function will usually cause following buffers to be
  *  reallocated.
  */
-int FbDevNativeWindow::setUsage(uint64_t usage)
+int FbDevNativeWindow::setUsage(int usage)
 {
     m_allocateBuffers = (m_usage != usage);
     TRACE("usage=x%" PRIx64 " m_allocateBuffers=%d", usage, m_allocateBuffers);
diff --git a/hybris/egl/platforms/fbdev/fbdev_window.h b/hybris/egl/platforms/fbdev/fbdev_window.h
index 041e9c7..0a19b64 100644
--- a/hybris/egl/platforms/fbdev/fbdev_window.h
+++ b/hybris/egl/platforms/fbdev/fbdev_window.h
@@ -64,7 +64,7 @@ protected:
     virtual unsigned int transformHint() const;
     virtual unsigned int getUsage() const;
     // perform calls
-    virtual int setUsage(uint64_t usage);
+    virtual int setUsage(int usage);
     virtual int setBuffersFormat(int format);
     virtual int setBuffersDimensions(int width, int height);
     virtual int setBufferCount(int cnt);
diff --git a/hybris/egl/platforms/hwcomposer/hwcomposer_window.cpp b/hybris/egl/platforms/hwcomposer/hwcomposer_window.cpp
index ef71f2e..c54ba9b 100644
--- a/hybris/egl/platforms/hwcomposer/hwcomposer_window.cpp
+++ b/hybris/egl/platforms/hwcomposer/hwcomposer_window.cpp
@@ -432,7 +432,7 @@ unsigned int HWComposerNativeWindow::getUsage() const
  *  Calling this function will usually cause following buffers to be
  *  reallocated.
  */
-int HWComposerNativeWindow::setUsage(uint64_t usage)
+int HWComposerNativeWindow::setUsage(int usage)
 {
     usage |= GRALLOC_USAGE_HW_COMPOSER|GRALLOC_USAGE_HW_FB;
     int need_realloc = (m_usage != (unsigned int) usage);
diff --git a/hybris/egl/platforms/hwcomposer/hwcomposer_window.h b/hybris/egl/platforms/hwcomposer/hwcomposer_window.h
index 6b78fe4..2cb7da5 100644
--- a/hybris/egl/platforms/hwcomposer/hwcomposer_window.h
+++ b/hybris/egl/platforms/hwcomposer/hwcomposer_window.h
@@ -67,7 +67,7 @@ protected:
     virtual unsigned int transformHint() const;
     virtual unsigned int getUsage() const;
     // perform calls
-    virtual int setUsage(uint64_t usage);
+    virtual int setUsage(int usage);
     virtual int setBuffersFormat(int format);
     virtual int setBuffersDimensions(int width, int height);
     virtual int setBufferCount(int cnt);
diff --git a/hybris/egl/platforms/wayland/wayland_window.h b/hybris/egl/platforms/wayland/wayland_window.h
index 2f8277d..b7af5cf 100644
--- a/hybris/egl/platforms/wayland/wayland_window.h
+++ b/hybris/egl/platforms/wayland/wayland_window.h
@@ -179,7 +179,7 @@ protected:
     virtual unsigned int transformHint() const;
     virtual unsigned int getUsage() const;
     // perform calls
-    virtual int setUsage(uint64_t usage);
+    virtual int setUsage(int usage);
     virtual int setBuffersFormat(int format);
     virtual int setBuffersDimensions(int width, int height);
     virtual int setBufferCount(int cnt);
diff --git a/hybris/platforms/common/nativewindowbase.h b/hybris/platforms/common/nativewindowbase.h
index 9161852..3d6358c 100644
--- a/hybris/platforms/common/nativewindowbase.h
+++ b/hybris/platforms/common/nativewindowbase.h
@@ -87,7 +87,7 @@ protected:
 	//perform interfaces
 	virtual int setBuffersFormat(int format) = 0;
 	virtual int setBuffersDimensions(int width, int height) = 0;
-	virtual int setUsage(uint64_t usage) = 0;
+	virtual int setUsage(int usage) = 0;
 	virtual int setBufferCount(int cnt) = 0;
 private:
 	static int _setSwapInterval(struct ANativeWindow* window, int interval);
diff --git a/hybris/platforms/wayland/wayland_window_common.cpp b/hybris/platforms/wayland/wayland_window_common.cpp
index 16d917b..f4e5991 100644
--- a/hybris/platforms/wayland/wayland_window_common.cpp
+++ b/hybris/platforms/wayland/wayland_window_common.cpp
@@ -530,7 +530,7 @@ int WaylandNativeWindow::setBuffersDimensions(int width, int height) {
     return NO_ERROR;
 }
 
-int WaylandNativeWindow::setUsage(uint64_t usage) {
+int WaylandNativeWindow::setUsage(int usage) {
     if ((usage | GRALLOC_USAGE_HW_TEXTURE) != m_usage)
     {
         TRACE("old-usage:x%" PRIx64 " new-usage:x%" PRIx64, m_usage, usage);
diff --git a/hybris/tests/Makefile.am b/hybris/tests/Makefile.am
index 9777f31..e222bb7 100644
--- a/hybris/tests/Makefile.am
+++ b/hybris/tests/Makefile.am
@@ -15,6 +15,7 @@ bin_PROGRAMS = \
 	test_opencl \
 	test_wifi \
 	test_hwcomposer \
+	test_hwcomposer_c \
 	test_nfc \
 	test_dlopen
 
@@ -192,7 +193,6 @@ test_hwcomposer_CXXFLAGS += \
 	-DHAS_HWCOMPOSER2_HEADERS=0
 endif
 
-
 if HAS_ANDROID_4_2_0
 test_hwcomposer_LDADD += \
 	$(top_builddir)/libsync/libsync.la \
@@ -205,6 +205,55 @@ test_hwcomposer_LDADD += \
 endif
 endif
 
+test_hwcomposer_c_SOURCES = test_hwcomposer_c.c test_common.cpp
+test_hwcomposer_c_CXXFLAGS = \
+	-I$(top_srcdir)/include \
+	$(ANDROID_HEADERS_CFLAGS) \
+	-I$(top_srcdir)/common \
+	-I$(top_srcdir)/platforms/common \
+	-I$(top_srcdir)/egl/platforms/common \
+	-I$(top_srcdir)/egl/platforms/hwcomposer \
+	-I$(top_srcdir)/libsync \
+	-DUSE_HWCOMPOSER=1
+
+test_hwcomposer_c_CFLAGS = $(test_hwcomposer_c_CXXFLAGS)
+
+if WANT_MESA
+test_hwcomposer_c_CXXFLAGS += -DLIBHYBRIS_WANTS_MESA_X11_HEADERS
+endif
+test_hwcomposer_c_LDADD = \
+	-lm \
+	$(top_builddir)/common/libhybris-common.la \
+	$(top_builddir)/platforms/common/libhybris-platformcommon.la \
+	$(top_builddir)/egl/platforms/common/libhybris-eglplatformcommon.la \
+	$(libegl) \
+	$(libglesv2) \
+	$(top_builddir)/hardware/libhardware.la
+
+if HAS_HWCOMPOSER2_HEADERS
+test_hwcomposer_c_CFLAGS += \
+	-DHAS_HWCOMPOSER2_HEADERS=1
+test_hwcomposer_c_CXXFLAGS += \
+	-DHAS_HWCOMPOSER2_HEADERS=1
+test_hwcomposer_c_LDADD += \
+	$(top_builddir)/hwc2/libhwc2.la
+else
+test_hwcomposer_c_CXXFLAGS += \
+	-DHAS_HWCOMPOSER2_HEADERS=0
+endif
+
+if HAS_ANDROID_4_2_0
+test_hwcomposer_c_LDADD += \
+	$(top_builddir)/libsync/libsync.la \
+	$(top_builddir)/egl/platforms/hwcomposer/libhybris-hwcomposerwindow.la
+else
+if HAS_ANDROID_5_0_0
+test_hwcomposer_c_LDADD += \
+	$(top_builddir)/libsync/libsync.la \
+	$(top_builddir)/egl/platforms/hwcomposer/libhybris-hwcomposerwindow.la
+endif
+endif
+
 test_sensors_SOURCES = test_sensors.c
 test_sensors_CFLAGS = \
 	-I$(top_srcdir)/include \
diff --git a/hybris/tests/test_common.cpp b/hybris/tests/test_common.cpp
index 4ef2d8a..d24d095 100644
--- a/hybris/tests/test_common.cpp
+++ b/hybris/tests/test_common.cpp
@@ -386,6 +386,16 @@ HWComposer *create_hwcomposer_window()
 	}
 }
 
+extern "C" {
+
+#include <android/native_window.h>
+
+ANativeWindow* create_hwcomposer_window_c(){
+  return create_hwcomposer_window();
+}
+
+}
+
 #endif
 
 GLuint load_shader(GLenum shaderType, const char* pSource)
@@ -460,3 +470,11 @@ GLuint create_program(const char* pVertexSource, const char* pFragmentSource)
 
 	return program;
 }
+
+extern "C" {
+
+GLuint create_program_c(const char* pVertexSource, const char* pFragmentSource){
+  return create_program(pVertexSource, pFragmentSource);
+}
+
+}
diff --git a/hybris/tests/test_hwcomposer_c.c b/hybris/tests/test_hwcomposer_c.c
new file mode 100644
index 0000000..dee7113
--- /dev/null
+++ b/hybris/tests/test_hwcomposer_c.c
@@ -0,0 +1,188 @@
+/*
+ * Copyright (c) 2012 Carsten Munk <carsten.munk@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+#include <android-config.h>
+#include <android/native_window.h>
+
+#if ((ANDROID_VERSION_MAJOR >= 4 && ANDROID_VERSION_MINOR >= 2) || ANDROID_VERSION_MAJOR >= 5)
+
+#include <EGL/egl.h>
+#include <GLES2/gl2.h>
+#include <assert.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <math.h>
+#include <stddef.h>
+#include <malloc.h>
+
+ANativeWindow* window;
+
+extern ANativeWindow* create_hwcomposer_window_c();
+extern GLuint         create_program_c(const char* pVertexSource, const char* pFragmentSource);
+
+const char vertex_src [] =
+"                                        \
+   attribute vec4        position;       \
+   varying mediump vec2  pos;            \
+   uniform vec4          offset;         \
+                                         \
+   void main()                           \
+   {                                     \
+      gl_Position = position + offset;   \
+      pos = position.xy;                 \
+   }                                     \
+";
+
+
+const char fragment_src [] =
+"                                                      \
+   varying mediump vec2    pos;                        \
+   uniform mediump float   phase;                      \
+                                                       \
+   void  main()                                        \
+   {                                                   \
+      gl_FragColor  =  vec4( 1., 0.9, 0.7, 1.0 ) *     \
+        cos( 30.*sqrt(pos.x*pos.x + 1.5*pos.y*pos.y)   \
+             + atan(pos.y,pos.x) - phase );            \
+   }                                                   \
+";
+
+
+GLfloat norm_x    =  0.0;
+GLfloat norm_y    =  0.0;
+GLfloat offset_x  =  0.0;
+GLfloat offset_y  =  0.0;
+GLfloat p1_pos_x  =  0.0;
+GLfloat p1_pos_y  =  0.0;
+
+GLint phase_loc;
+GLint offset_loc;
+GLint position_loc;
+
+const float vertexArray[] = {
+	0.0,  1.0,  0.0,
+	-1.,  0.0,  0.0,
+	0.0, -1.0,  0.0,
+	1.,  0.0,  0.0,
+	0.0,  1.,  0.0
+};
+
+int main(int argc, char **argv)
+{
+	EGLDisplay display;
+	EGLConfig ecfg;
+	EGLint num_config;
+	EGLint attr[] = {       // some attributes to set up our egl-interface
+		EGL_BUFFER_SIZE, 32,
+		EGL_RENDERABLE_TYPE,
+		EGL_OPENGL_ES2_BIT,
+		EGL_NONE
+	};
+	EGLSurface surface;
+	EGLint ctxattr[] = {
+		EGL_CONTEXT_CLIENT_VERSION, 2,
+		EGL_NONE
+	};
+	EGLContext context;
+
+	EGLBoolean rv;
+
+	ANativeWindow *win = create_hwcomposer_window_c();
+
+	display = eglGetDisplay(NULL);
+	assert(eglGetError() == EGL_SUCCESS);
+	assert(display != EGL_NO_DISPLAY);
+
+	rv = eglInitialize(display, 0, 0);
+	assert(eglGetError() == EGL_SUCCESS);
+	assert(rv == EGL_TRUE);
+
+	eglChooseConfig((EGLDisplay) display, attr, &ecfg, 1, &num_config);
+	assert(eglGetError() == EGL_SUCCESS);
+	assert(rv == EGL_TRUE);
+
+
+
+	surface = eglCreateWindowSurface((EGLDisplay) display, ecfg, (EGLNativeWindowType) (ANativeWindow*)(win), NULL);
+	assert(eglGetError() == EGL_SUCCESS);
+	assert(surface != EGL_NO_SURFACE);
+
+	context = eglCreateContext((EGLDisplay) display, ecfg, EGL_NO_CONTEXT, ctxattr);
+	assert(eglGetError() == EGL_SUCCESS);
+	assert(context != EGL_NO_CONTEXT);
+
+	assert(eglMakeCurrent((EGLDisplay) display, surface, surface, context) == EGL_TRUE);
+
+	const char *version = (const char *)glGetString(GL_VERSION);
+	assert(version);
+	printf("%s\n",version);
+
+	GLuint shaderProgram = create_program_c(vertex_src, fragment_src);
+	glUseProgram  ( shaderProgram );    // and select it for usage
+
+	//// now get the locations (kind of handle) of the shaders variables
+	position_loc  = glGetAttribLocation  ( shaderProgram , "position" );
+	phase_loc     = glGetUniformLocation ( shaderProgram , "phase"    );
+	offset_loc    = glGetUniformLocation ( shaderProgram , "offset"   );
+	if ( position_loc < 0  ||  phase_loc < 0  ||  offset_loc < 0 ) {
+		return 1;
+	}
+
+	//glViewport ( 0 , 0 , 800, 600); // commented out so it uses the initial window dimensions
+	glClearColor ( 1. , 1. , 1. , 1.);    // background color
+	float phase = 0;
+	int i;
+	for (i=0; i<1020*60; ++i) {
+		glClear(GL_COLOR_BUFFER_BIT);
+		glUniform1f ( phase_loc , phase );  // write the value of phase to the shaders phase
+		phase  =  fmodf ( phase + 0.5f , 2.f * 3.141f );    // and update the local variable
+
+		glUniform4f ( offset_loc  ,  offset_x , offset_y , 0.0 , 0.0 );
+
+		glVertexAttribPointer ( position_loc, 3, GL_FLOAT, GL_FALSE, 0, vertexArray );
+		glEnableVertexAttribArray ( position_loc );
+		glDrawArrays ( GL_TRIANGLE_STRIP, 0, 5 );
+
+		eglSwapBuffers ( (EGLDisplay) display, surface );  // get the rendered buffer to the screen
+	}
+
+	printf("stop\n");
+
+#if 0
+	(*egldestroycontext)((EGLDisplay) display, context);
+	printf("destroyed context\n");
+
+	(*egldestroysurface)((EGLDisplay) display, surface);
+	printf("destroyed surface\n");
+	(*eglterminate)((EGLDisplay) display);
+	printf("terminated\n");
+	android_dlclose(baz);
+#endif
+	return 0;
+}
+
+#else
+#include <stdio.h>
+
+int main(int argc, char *argv[])
+{
+    printf("test_hwcomposer is not supported in this build\n");
+    return 0;
+}
+#endif
+
+// vim:ts=4:sw=4:noexpandtab
diff --git a/hybris/vulkan/platforms/wayland/vulkanplatform_wayland.cpp b/hybris/vulkan/platforms/wayland/vulkanplatform_wayland.cpp
index 76fd56c..2c0521e 100644
--- a/hybris/vulkan/platforms/wayland/vulkanplatform_wayland.cpp
+++ b/hybris/vulkan/platforms/wayland/vulkanplatform_wayland.cpp
@@ -25,7 +25,6 @@
 #include "ws.h"
 
 #define VK_USE_PLATFORM_ANDROID_KHR 1
-#define VK_USE_PLATFORM_WAYLAND_KHR 1
 extern "C" {
 #include <vulkanplatformcommon.h>
 };
diff --git a/hybris/vulkan/platforms/wayland/wayland_window.h b/hybris/vulkan/platforms/wayland/wayland_window.h
index fbd02df..8ac214c 100644
--- a/hybris/vulkan/platforms/wayland/wayland_window.h
+++ b/hybris/vulkan/platforms/wayland/wayland_window.h
@@ -176,7 +176,7 @@ protected:
     virtual unsigned int transformHint() const;
     virtual unsigned int getUsage() const;
     // perform calls
-    virtual int setUsage(uint64_t usage);
+    virtual int setUsage(int usage);
     virtual int setBuffersFormat(int format);
     virtual int setBuffersDimensions(int width, int height);
     virtual int setBufferCount(int cnt);
diff --git a/hybris/vulkan/vulkan.c b/hybris/vulkan/vulkan.c
index 58fee37..cbc8bbe 100644
--- a/hybris/vulkan/vulkan.c
+++ b/hybris/vulkan/vulkan.c
@@ -19,7 +19,6 @@
 #define _GNU_SOURCE
 
 #define VK_USE_PLATFORM_ANDROID_KHR 1
-#define VK_USE_PLATFORM_WAYLAND_KHR 1
 
 #include <vulkan/vulkan.h>
 #include <dlfcn.h>
@@ -338,6 +337,7 @@ VULKAN_IDLOAD(vkGetDisplayModePropertiesKHR);
 VULKAN_IDLOAD(vkCreateDisplayModeKHR);
 VULKAN_IDLOAD(vkGetDisplayPlaneCapabilitiesKHR);
 VULKAN_IDLOAD(vkCreateDisplayPlaneSurfaceKHR);
+VULKAN_IDLOAD(vkCreateAndroidSurfaceKHR);
 VULKAN_IDLOAD(vkCreateSharedSwapchainsKHR);
 VULKAN_IDLOAD(vkGetPhysicalDeviceFeatures2KHR);
 VULKAN_IDLOAD(vkGetPhysicalDeviceProperties2KHR);
diff --git a/hybris/vulkan/ws.h b/hybris/vulkan/ws.h
index a2d080c..8835902 100644
--- a/hybris/vulkan/ws.h
+++ b/hybris/vulkan/ws.h
@@ -19,7 +19,6 @@
 #define __LIBHYBRIS_VULKAN_WS_H
 
 #define VK_USE_PLATFORM_ANDROID_KHR 1
-#define VK_USE_PLATFORM_WAYLAND_KHR 1
 
 #include "config.h"
 #include <vulkan/vulkan.h>
